# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    default_locale: 'de_DE'
    app_name: 'Base'
    app_name_long: 'BasePackage'
    app_decription: 'Description of BasePackage'
    app_version: '1.0.0'
    bilder_ordner: '%kernel.project_dir%/public/bilder'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services.
        bind:
#            $test: 'test-content'

    App\Entity\Helper\UserHelper:
        # redundant thanks to _defaults, but value is overridable on each service
        autowire: true

    App\Entity\Helper\VCodeHelper:
        # redundant thanks to _defaults, but value is overridable on each service
        autowire: true

    App\Entity\Helper\TransferHelper:
        # redundant thanks to _defaults, but value is overridable on each service
        autowire: true

    App\Entity\Transfers:
        # redundant thanks to _defaults, but value is overridable on each service
        autowire: true

    App\Entity\Helper\DepoHelper:
        # redundant thanks to _defaults, but value is overridable on each service
        autowire: true

    App\Entity\Helper\AdminHelper:
        # redundant thanks to _defaults, but value is overridable on each service
        autowire: true

    App\Entity\Helper\MessageHelper:
        # redundant thanks to _defaults, but value is overridable on each service
        autowire: true



    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Redis/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    # monolog log formatter
    Monolog\Formatter\JsonFormatter: ~

    # extending logger information
    App\Logger\AuthenticationRequestProcessor:
        tags:
            - {name: 'monolog.processor', channel: 'authentication' }
    monolog.formatter.authentication_request:
        class: 'Monolog\Formatter\LineFormatter'
        arguments:
            - "[%%datetime%%] %%channel%%.%%level_name%%: %%message%% %%context%% {'user':'%%extra.username%%','host':'%%extra.host%%','firewall':'%%extra.firewall%%','form':'%%extra.form_name%%'} %%extra%%\n"

    App\Command\RedisMaintenanceCommand:
        arguments:
            $redisClientDoctrine: '@snc_redis.doctrine'
            $redisClientSession: '@snc_redis.session'
            $redisClientCache: '@snc_redis.cache'



